{"ast":null,"code":"import React from 'react';\nconst Vallidations = {\n  Username: {\n    required: \"User Name is required\"\n  },\n  EmailId: {\n    required: \"Email Id is required\"\n  },\n  Role: {\n    required: \"Role is required\"\n  },\n  Password: {\n    required: \"Password is required\"\n  }\n};\nexport default Vallidations;\nexport const IsNumberKey = e => {\n  const isValidInput = /^[0-9\\b]+$/.test(e.key);\n  if (!isValidInput) {\n    e.preventDefault();\n  }\n};\n_c = IsNumberKey;\nexport const IsAlphabetNumber = e => {\n  const isValidInput = /[^a-zA-Z0-9]/.test(e.key);\n  if (isValidInput) {\n    e.preventDefault();\n  }\n};\n_c2 = IsAlphabetNumber;\nexport const IsAlphabetKey = e => {\n  const isValidInput = /^[a-zA-Z\\s]+$/.test(e.key);\n  if (!isValidInput) {\n    e.preventDefault();\n  }\n};\n_c3 = IsAlphabetKey;\nexport const IsNumberDecimalKey = e => {\n  const isValidInput = /^[0-9.]*$/.test(e.key);\n  if (!isValidInput || (e.target.value + '' + e.key).split('.').length > 2) {\n    e.preventDefault();\n  }\n  // if((e.target.value).match(/\\w\\../) && (e.target.value).match(/[A-Za-z]\\.\\d/)){\n  //     e.preventDefault();\n  // }\n};\n\n// E.g:- OnKeyPress={IsEmail}  -- allow only alphabet,numeric,@,.\n_c4 = IsNumberDecimalKey;\nexport const IsEmail = e => {\n  const isValidInput = /^[a-zA-Z0-9@._-]+$/.test(e.key);\n  if (!isValidInput) {\n    e.preventDefault();\n  }\n  return true;\n};\n_c5 = IsEmail;\nexport const EmailValidation = e => {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  if (!e) {\n    return \"Email Id is required\";\n  } else if (!emailRegex.test(e)) {\n    return \"Invalid email format\";\n  }\n  return \"\";\n};\n_c6 = EmailValidation;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"IsNumberKey\");\n$RefreshReg$(_c2, \"IsAlphabetNumber\");\n$RefreshReg$(_c3, \"IsAlphabetKey\");\n$RefreshReg$(_c4, \"IsNumberDecimalKey\");\n$RefreshReg$(_c5, \"IsEmail\");\n$RefreshReg$(_c6, \"EmailValidation\");","map":{"version":3,"names":["React","Vallidations","Username","required","EmailId","Role","Password","IsNumberKey","e","isValidInput","test","key","preventDefault","_c","IsAlphabetNumber","_c2","IsAlphabetKey","_c3","IsNumberDecimalKey","target","value","split","length","_c4","IsEmail","_c5","EmailValidation","emailRegex","_c6","$RefreshReg$"],"sources":["E:/React toolkit app/redux_toolkit_app/src/component/Vallidations.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst Vallidations = {\r\n    Username: { required: \"User Name is required\" },\r\n    EmailId: { required: \"Email Id is required\" },\r\n    Role: { required: \"Role is required\" },\r\n    Password: { required: \"Password is required\" }\r\n}\r\n\r\nexport default Vallidations;\r\n\r\nexport const IsNumberKey = (e) => {\r\n    const isValidInput = /^[0-9\\b]+$/.test(e.key);\r\n    if (!isValidInput) { e.preventDefault(); }\r\n};\r\n\r\nexport const IsAlphabetNumber = (e) => {\r\n    const isValidInput = /[^a-zA-Z0-9]/.test(e.key);\r\n    if (isValidInput) { e.preventDefault(); }\r\n};\r\n\r\nexport const IsAlphabetKey = (e) => {\r\n    const isValidInput = /^[a-zA-Z\\s]+$/.test(e.key);\r\n    if (!isValidInput) { e.preventDefault(); }\r\n};\r\nexport const IsNumberDecimalKey = (e) => {\r\n    const isValidInput = /^[0-9.]*$/.test(e.key);\r\n    if (!isValidInput || ((e.target.value + '' + e.key).split('.').length > 2)) {\r\n        e.preventDefault();\r\n    }\r\n    // if((e.target.value).match(/\\w\\../) && (e.target.value).match(/[A-Za-z]\\.\\d/)){\r\n    //     e.preventDefault();\r\n    // }\r\n};\r\n\r\n// E.g:- OnKeyPress={IsEmail}  -- allow only alphabet,numeric,@,.\r\nexport const IsEmail = (e) => {\r\n    const isValidInput = /^[a-zA-Z0-9@._-]+$/.test(e.key);\r\n\r\n    if (!isValidInput) {\r\n        e.preventDefault();\r\n    }\r\n    return true\r\n};\r\n\r\nexport const EmailValidation = (e) => {\r\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n    if (!e) {\r\n        return \"Email Id is required\";\r\n    } else if (!emailRegex.test(e)) {\r\n        return \"Invalid email format\";\r\n    }\r\n    return \"\";\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAE;IAAEC,QAAQ,EAAE;EAAwB,CAAC;EAC/CC,OAAO,EAAE;IAAED,QAAQ,EAAE;EAAuB,CAAC;EAC7CE,IAAI,EAAE;IAAEF,QAAQ,EAAE;EAAmB,CAAC;EACtCG,QAAQ,EAAE;IAAEH,QAAQ,EAAE;EAAuB;AACjD,CAAC;AAED,eAAeF,YAAY;AAE3B,OAAO,MAAMM,WAAW,GAAIC,CAAC,IAAK;EAC9B,MAAMC,YAAY,GAAG,YAAY,CAACC,IAAI,CAACF,CAAC,CAACG,GAAG,CAAC;EAC7C,IAAI,CAACF,YAAY,EAAE;IAAED,CAAC,CAACI,cAAc,CAAC,CAAC;EAAE;AAC7C,CAAC;AAACC,EAAA,GAHWN,WAAW;AAKxB,OAAO,MAAMO,gBAAgB,GAAIN,CAAC,IAAK;EACnC,MAAMC,YAAY,GAAG,cAAc,CAACC,IAAI,CAACF,CAAC,CAACG,GAAG,CAAC;EAC/C,IAAIF,YAAY,EAAE;IAAED,CAAC,CAACI,cAAc,CAAC,CAAC;EAAE;AAC5C,CAAC;AAACG,GAAA,GAHWD,gBAAgB;AAK7B,OAAO,MAAME,aAAa,GAAIR,CAAC,IAAK;EAChC,MAAMC,YAAY,GAAG,eAAe,CAACC,IAAI,CAACF,CAAC,CAACG,GAAG,CAAC;EAChD,IAAI,CAACF,YAAY,EAAE;IAAED,CAAC,CAACI,cAAc,CAAC,CAAC;EAAE;AAC7C,CAAC;AAACK,GAAA,GAHWD,aAAa;AAI1B,OAAO,MAAME,kBAAkB,GAAIV,CAAC,IAAK;EACrC,MAAMC,YAAY,GAAG,WAAW,CAACC,IAAI,CAACF,CAAC,CAACG,GAAG,CAAC;EAC5C,IAAI,CAACF,YAAY,IAAK,CAACD,CAAC,CAACW,MAAM,CAACC,KAAK,GAAG,EAAE,GAAGZ,CAAC,CAACG,GAAG,EAAEU,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,GAAG,CAAE,EAAE;IACxEd,CAAC,CAACI,cAAc,CAAC,CAAC;EACtB;EACA;EACA;EACA;AACJ,CAAC;;AAED;AAAAW,GAAA,GAVaL,kBAAkB;AAW/B,OAAO,MAAMM,OAAO,GAAIhB,CAAC,IAAK;EAC1B,MAAMC,YAAY,GAAG,oBAAoB,CAACC,IAAI,CAACF,CAAC,CAACG,GAAG,CAAC;EAErD,IAAI,CAACF,YAAY,EAAE;IACfD,CAAC,CAACI,cAAc,CAAC,CAAC;EACtB;EACA,OAAO,IAAI;AACf,CAAC;AAACa,GAAA,GAPWD,OAAO;AASpB,OAAO,MAAME,eAAe,GAAIlB,CAAC,IAAK;EAClC,MAAMmB,UAAU,GAAG,kDAAkD;EACrE,IAAI,CAACnB,CAAC,EAAE;IACJ,OAAO,sBAAsB;EACjC,CAAC,MAAM,IAAI,CAACmB,UAAU,CAACjB,IAAI,CAACF,CAAC,CAAC,EAAE;IAC5B,OAAO,sBAAsB;EACjC;EACA,OAAO,EAAE;AACb,CAAC;AAACoB,GAAA,GARWF,eAAe;AAAA,IAAAb,EAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAM,GAAA,EAAAE,GAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAhB,EAAA;AAAAgB,YAAA,CAAAd,GAAA;AAAAc,YAAA,CAAAZ,GAAA;AAAAY,YAAA,CAAAN,GAAA;AAAAM,YAAA,CAAAJ,GAAA;AAAAI,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}